@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';

$default-vars: (
  /**
   * Brand values are reliably the exact values provided by the brand (as long as they are provided)
   * Material system primary/secondary/tertiary are be based on palette tones by default unless overridden and therefore are not reliably the exact brand values.
   */
  brand-primary: var(--mat-sys-primary),
  brand-secondary: var(--mat-sys-secondary),
  brand-tertiary: var(--mat-sys-tertiary),

  /**
   * Context-free aliases for Material overrides.
   * Default should normally be `null` so as when used in context of a component the Material values are used as a fallback.
   */
  container-shape: null,
  label-text-transform: null
);

@function get-contrast($color) {
  @if color.channel($color, 'lightness', $space: hsl) < 50 {
    @return white;
  }
  @return black;
}

@function set-contrast($map, $key, $contrast-key: null) {
  @if meta.type-of($contrast-key) != 'string' {
    $contrast-key: on-#{$key}
  }
  @if map.has-key($map, $key) and not map.has-key($map, $contrast-key) {
    $map: map.set($map, $contrast-key, get-contrast(map.get($map, $key)));
  }
  @return $map;
}

@mixin vars($overrides: ()) {
  $overrides: set-contrast($overrides, brand-primary);
  $overrides: set-contrast($overrides, brand-secondary);
  $overrides: set-contrast($overrides, brand-tertiary);
  $vars: map.merge($default-vars, $overrides);
  & {
    @each $var, $val in $vars {
      @if meta.type-of($val) != 'null' {
        --cw-#{$var}: #{$val};
      }
    }
  }
}
